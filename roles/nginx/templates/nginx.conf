user  root root;
#一般情况下开4个或8个, 再往上开的话优化不太大,开启太多，会影响主进程调度，占用cpu会增高
worker_processes auto;
#绑定worker进程和CPU，只有LINUX内核高于2.4可用；
worker_cpu_affinity auto;
error_log  {{ NGINX_LOG_DIR }}/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;
#error_log  off;
##和系统的单进程打开文件数一致，不必理会进程个数，使用ulimit -SHn 102400 设置
worker_rlimit_nofile 102400;
#timer_resolution 2s;
events
      {
        #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
        use epoll;
        #该值受系统进程最大打开文件数限制，需要使用命令ulimit -n 51200设置（/etc/sysctl.conf中添加fs.file-max=是无效的，可添加至rc.local开机设定）
        worker_connections 102400;
      }

stream {
   include {{ INSTALLATION_DIR }}/conf/vhost_conf/stream_conf/*.conf;
   #limit_conn_zone $binary_remote_addr zone=ip_addr:10m;
   #定义限制IP连接数名称，与大小 $binary_remote_addr以2进制存放远程地址
}

http
      {
        #LDAP验证，可根据需要开启

        #ldap_server ptldap {
        #  url ldap://172.16.6.13:389/DC=asdfsx,DC=com?cn?sub?(objectClass=person);
        #  binddn "cn=ldap,dc=asdfsx,dc=com";
        #  binddn_passwd asdfsx;
        #  group_attribute People;
        #  group_attribute_is_dn on;
        #  require  valid_user;
        #}


        #mine.types内定义各文件类型映像，
        include       mime.types;
        #设置默认类型是二进制流，当类型未定义时使用二进制流的方式，比如未加装PHP时，是不予解析，用浏览器访问则出现下载窗口
        default_type  application/octet-stream;
        log_format  access  '$remote_addr - $remote_user [$time_local] $request '
                          '"$status" $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        log_format  etllog  '$time_iso8601\t$remote_addr\t$http_user_agent\t$request\t$request_time\t$upstream_addr\t$upstream_response_time';

        log_format  js  '$remote_addr - $remote_user [$time_local] $request';

        log_format json '{ "@timestamp": "$time_iso8601", '
                         '"remote_addr": "$remote_addr", '
                         '"domain": "$http_host", '
                         '"remote_user": "$remote_user", '
                         '"body_bytes_sent": "$body_bytes_sent", '
                         '"request_time": "$request_time", '
                         '"status": "$status", '
                         '"request": "$request", '
                         '"request_method": "$request_method", '
                         '"http_referrer": "$http_referer", '
                         '"body_bytes_sent":"$body_bytes_sent", '
                         '"http_x_forwarded_for": "$http_x_forwarded_for", '
                         '"http_user_agent": "$http_user_agent" ,'
                         '"upstreamhost":"$upstream_addr",'
                         '"upstreamtime":"$upstream_response_time"}';

        access_log  off;
        #不能带单位！配置个主机时必须设置该值，否则无法运行Nginx或测试时不通过，该设置与server_names_hash_max_size 共同控制保存服务器名的HASH表，hash bucket size总是等于hash表的大小，
        #并且是一路处理器缓存大小的倍数。若hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。
        #第一次是确定存储单元的地址，第二次是在存储单元中查找键值。若报出hash max size 或 hash bucket size的提示，则我们需要增加server_names_hash_max_size的值。
        server_names_hash_bucket_size 256;
        #4为个数，128k为大小，默认是4k。申请4个128k。当http 的URI太长或者request header过大时会报414 Request URI too large或400 bad request，这是很有可能是cookie中写入的值太大造成的，
        #因为header中的其他参数的size一般比较固定，只有cookie可能被写入较大的数据，这时可以调大上述两个值，相应的浏览器中cookie的字节数上限会增大。
        #含义：设置用户请求头所使用的buffer大小
        #（1）对绝大多数请求来说，1k足以满足请求头所需的buffer；
        #（2）对于携带有较大cookie或来自于wap用户的请求头来说，1k的buffer一般不够，这时可以使用指令large_client_header_buffers。
        client_header_buffer_size 32k;
        large_client_header_buffers 4 64k;
        #允许客户端请求的最大单个文件字节数
        client_max_body_size     3m;
        #缓冲区代理缓冲用户端请求的最大字节数，可以理解为先保存到本地再传给用户
        client_body_buffer_size  32k;
        #调整下面的参数，能够解决代理过程中的一些502 499错误；
        server_tokens off;
        ##sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
        #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
        sendfile on;
        #打开linux（仅linux下）下TCP_CORK，sendfile打开时才有效，用来发送系统HTTP response headers设置该选项的目的是告诉TCP协议不要仅仅为了清空发送缓存而发送报文段。
        #通常应该设置TCPNOPUSH插口选项。这样，当请求长度超过报文段最大长度时，协议就会尽可能发出满长度的报文段。这样可以减少报文段的数量，减少的程度取决于每次发送的数据量。
        tcp_nopush     on;
        #打开TCP_NODELAY在包含了keepalive才有效
        #上述四项可以有效提高文件传输性能，用sendfile()函数来转移大量数据，协议会需预先解析数据包报头部分信息，正常情况下报头很小，而且套接字上设置了TCP_NODELAY。有报头的包将被立即传输，
        #在某些情况下，因为这个包成功地被对方收到后需要请求对方确认。这样，大量数据的传输就会被延迟而且产生大量不必要的网络流量交换
        #参数调大可以解决502错误
        keepalive_timeout 60s;
        tcp_nodelay on;
        #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。
        open_file_cache max=102400 inactive=20s;
        #这个是指多长时间检查一次缓存的有效信息。
        open_file_cache_valid 30s;
        #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。
        open_file_cache_min_uses 1;
        #打开GZIP压缩，实时压缩输出数据流
        gzip on;
        #打开GZIP压缩，实时压缩输出数据流
        gzip_min_length 1k;
        # 以16K为单位4倍的申请内存做压缩结果流缓存，默认值是申请跟原始数据相同大小的内存空间去存储gzip压缩结果。
        gzip_buffers     4 16k;
        # 默认1.1，大部分浏览器已经支持gzip解压，不必理会
        gzip_http_version 1.0;
        #压缩比率1-9，1压缩比最小处理速度最快，9压缩比最大但处理最慢且耗CPU
        gzip_comp_level 2;
        #压缩类型，无论是否指定text/html总是会压缩
        gzip_types        text/plain application/x-javascript text/css text/javascript application/xml application/javascript application/json image/svg+xml;
        #压缩类型，无论是否指定text/html总是会压缩
        gzip_vary on;
        #该选项在做反向代理时设定压缩，后面参数为验证的header头信息，再做相应的压缩处理，关闭为off
        #gzip_proxied expired no-cache no-store private no_last_modified no_etag auth any
        #定义名为lasdfsx的并发连接数限制空间，存储10M的带有二进制IP的会话信息，每个会话信息是32bytes,10M应该可以记录320000个会话。配合limit_conn 使用
        #limit_conn_zone  $binary_remote_addr zone=lasdfsx:10m;
        ##定义名为rasdfsx请求次数访问限制空间，限制每个IP地址每秒允许最大同时连接数，超过这个数字的请求将被返回”Service unavailable” (503)代码。配limit_req zone使用
        #limit_req_zone  $binary_remote_addr  zone=rasdfsx:10m rate=3r/s;

        # 通过下面的优化，可以提高 nginx ssl 的安全级别，但是开启需谨慎，以防止出现不必要的麻烦

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_cache  builtin:1000  shared:SSL:10m;

#        ssl_stapling on;
#        ssl_stapling_verify on;

        ssl_prefer_server_ciphers on;
        ssl_dhparam {{ INSTALLATION_DIR }}/ssl/{{ SSL_DHPARAM }};

        # ---------------------------  add_header Strict-Transport-Security max-age=63072000; ----#

        #使网站严格使用https协议传输，如果网页中有http链接，那么这个链接将会无法访问或者是跳转到https协议上来访问这个链接
        #add_header Strict-Transport-Security max-age=63072000;

        #----------------------------- add_header X-Frame-Options DENY; --------------------------#
        #add_header X-Frame-Options DENY;
        #使用 X-Frame-Options 有三个可选的值：
        #DENY：浏览器拒绝当前页面加载任何Frame页面
        #SAMEORIGIN：frame页面的地址只能为同源域名下的页面
        #ALLOW-FROM：允许frame加载的页面地址

        #----------------------------- add_header X-Content-Type-Options nosniff;  ---------------#
        # 根据文档的数据内容来判断文档类型
        # 不同的文档类型有不同的数据特征，通过这些特征来确定类型。
        # 但是，有些时候Web开发者并不希望这么IE 自动判断，怎么办？
        # IE8里面新增了一个HTTP请求数据包header的属性X-Content-Type-Options。
        # 可以通过使用X-Content-Type-Options:nosniff 选项来关闭IE的文档类型自动判断功能。
        # HTTP/1.1 200 OK
        # Content-Length: 108
        # Date: Thu, 26 Jun 2008 22:06:28 GMT
        # Content-Type: text/plain;
        # X-Content-Type-Options: nosniff
        # 通过下面这个响应头可以禁用浏览器的类型猜测行为
        # add_header X-Content-Type-Options nosniff;

        include {{ INSTALLATION_DIR }}/conf/vhost_conf/*.conf;
}