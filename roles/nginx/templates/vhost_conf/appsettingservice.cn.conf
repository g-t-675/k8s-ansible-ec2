server
      {
              listen  443;
              server_name  appsettingservice.{{ SERVER_DOMAIN }};
#                     access_log       /data/nginxlog/appsettingservice.log access buffer=64k;
              proxy_redirect off;
              ssl  on;
              ssl_certificate  {{ INSTALLATION_DIR }}/ssl/{{ SSL_CERTIFICATE }};
              ssl_certificate_key  {{ INSTALLATION_DIR }}/ssl/{{ SSL_CERTIFICATE_KEY }};
              location / {
                    proxy_next_upstream  error timeout invalid_header http_500 http_503 http_404;
                    proxy_pass        http://10.0.0.6:8081;
                    proxy_set_header   Host             $host;
                    proxy_set_header   X-Real-IP        $remote_addr;
                    proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
                    #允许客户端请求的最大单个文件字节数
                    client_max_body_size     10m;
                    #缓冲区代理缓冲用户端请求的最大字节数，可以理解为先保存到本地再传给用户
                    client_body_buffer_size  256k;
                    #跟后端服务器连接的超时时间_发起握手等候响应超时时间
                    proxy_connect_timeout    6m;
                    #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理
                    proxy_read_timeout       6m;
                    #后端服务器数据回传时间_就是在规定时间内后端服务器必须传完所有的数据
                    proxy_send_timeout       6m;
                    #代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可
                    proxy_buffer_size        64k;
                    #同上 告诉Nginx保存单个用的几个Buffer 最大用多大空间
                    proxy_buffers            4 256k;
                    #如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2
                    proxy_busy_buffers_size 256k;
                    #proxy缓存临时文件的大小
                    proxy_temp_file_write_size 256k;
                    # redirecet server error pages to the static pag ！
                    error_page  502 503 504        /502.html;
                    }
             }

server
        {
        listen  80;
        server_name   appsettingservice.{{ SERVER_DOMAIN }};
        rewrite ^(.*)$  https://$host$1 permanent;
        }